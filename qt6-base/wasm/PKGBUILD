# Maintainer: Martchus <martchus@gmx.net>

# All my PKGBUILDs are managed at https://github.com/Martchus/PKGBUILDs where
# you also find the URL of a binary repository.

# This file is created from PKGBUILD.sh.ep contained by the mentioned repository.
# Do not edit it manually! See README.md in the repository's root directory
# for more information.

# All patches are managed at https://github.com/Martchus/qtbase

pkgname=wasm-qt6-base
_qtver=6.10.0
pkgver=${_qtver/-/}
pkgrel=1
arch=(any)
url='https://www.qt.io'
license=(GPL-3.0-only
         LGPL-3.0-only
         LicenseRef-Qt-Commercial
         Qt-GPL-exception-1.0)
pkgdesc='A cross-platform application and UI framework (wasm)'
depends=('emscripten')
makedepends=('qt6-base' 'ninja' 'cmake')
optdepends=('qt6-base: development tools')
options=('!strip' '!buildflags' 'staticlibs' '!emptydirs')
groups=(wasm-qt6)
_pkgfqn="qtbase-everywhere-src-${_qtver}"
source=("https://download.qt.io/official_releases/qt/${pkgver%.*}/${_qtver}/submodules/${_pkgfqn}.tar.xz"
        '0001-Use-CMake-s-default-import-library-suffix.patch'
        '0002-Fix-finding-D-Bus.patch'
        '0003-Fix-using-static-PCRE2-and-DBus-1.patch'
        '0004-Fix-transitive-dependencies-of-static-libraries.patch'
        '0005-Fix-libjpeg-workaround-for-conflict-with-rpcndr.h.patch'
        '0006-Support-finding-static-MariaDB-client-library.patch'
        '0007-Allow-overriding-CMAKE_FIND_LIBRARY_SUFFIXES-to-pref.patch'
        '0008-Find-fontconfig-via-pkg-config-for-correct-handling-.patch'
        '0009-Fix-dependency-of-xcb-image-on-xcb-util.patch'
        '0010-Allow-using-properties-of-PkgConfig-targets-for-glib.patch'
        '0011-Allow-using-properties-of-PkgConfig-targets-for-Wayl.patch'
        '0012-Allow-overriding-preference-for-shared-libzstd-libra.patch'
        '0013-Workaround-Unknown-CMake-command-_qt_test_emscripten.patch'
        '0014-Fix-configuration-when-EMSCRIPTEN_ROOT-is-an-absolut.patch'
        '0015-Allow-keeping-Android-app-in-background-with-QtQuick.patch'
        '0016-Enable-minimal-and-offscreen-plugins-when-compiling-.patch'
        '0017-Allow-configuring-use-of-OpenSSL-in-QPasswordDigesto.patch'
        '0018-Drop-CMAKE_SYSTEM_VERSION-from-modules-json-if-Linux.patch'
        '0019-Workaround-linker-error-about-missing-symbol-__sync_.patch'
        '0020-Fix-Android-build-after-ec2e3e7ac92d000e0df0c693b9a6.patch'
        '0021-Disable-position-resize-Automatic-on-first-expose.patch')
sha256sums=('ead4623bcb54a32257c5b3e3a5aec6d16ec96f4cda58d2e003f5a0c16f72046d'
            'b0753c1f9318366b7002e68110678a8a4310707736bcc88877956ce4e376fe3b'
            'df145ca3edfa8e1619a2379ae9797ac8c02524bacc898c11378d93b66903e78b'
            'fc5376b9e727a2e344a7ac8d6f47796566732ca6dda6cddc56e2c9e85d72be09'
            '328f0bb3dcccbe745cde9cb6633de3d1d298cb6965668cfd1e4244c3bc40da46'
            'ae4e4f1dfa9592e0151f76e361e4abf2ebc817e4fe0a0a354cf8c0135e3a804b'
            '129a9376bf1bdc1c8ee55605593e38ca241ca1721ea20bb9707c650bcf005a9c'
            '560e873245f813862dd537c1f048a73edcece42ed92593d62915d489f842398a'
            '01fe85c33f50fc39c8f83ee9d8128e854ab03e98c4e6d5e8e3b69729bf02df5b'
            'f0e530ad7b68ee4e5e6637bdaffd5f2a2aaf3a9c42863b03e692a81c96f73da2'
            '8a030fb9887f9da7f50a4fd58c39e25cc25cb5641fea30cc67ba6032268dd6dd'
            '18b43d103aab9567ddd37ac7dd8271fd7f20bd97d74d522c943534d607893df5'
            'f2b9e3d96f4fe463daf242b42e3b92143df72b33714aab3488a5d2d9375c0520'
            '4df08867d481388e5e2c4fd1ff1827feea8f77e13c330a8298749d9d4b61f1a3'
            'a1d469a8ee3d664b1cb5d63c6ed7b2cf8743e7853875617655d5ed2bc413e273'
            'c315e732de2caffca346a0f07396cc4818c26694dcc899f8ef232d0d5b6fd3c4'
            'e47e0defda4a3c6f921e2ab40f9f2b582766e9191840209822704e29e5840d90'
            '6bf4e2159aff0d74a6d245476be33cbf7fe22c3b92ae1f93856b400d74cbf17e'
            'e4602138789f8da52c9ab70e416078c728ad3815da09dc0e2eafc207d808b405'
            '7cadfbb34e45b512709b4c85fce86743f2e94aec0d1850514fed8f612afb9274'
            'f341fedad4729246c7d6a6df1f3091116c0f808bfded2f731d4d9f82520833cc'
            '2b9c89a294b96706fd6210cc9ff84a515f2203f7214c75def3507465e8fe4691')

prepare () {
  cd $_pkgfqn

  # apply patches; further descriptions can be found in patch files itself
  for patch in "$srcdir/"*.patch; do
    msg2 "Applying patch $patch"
    patch -p1 -i "$patch"
  done
}

build() {
  export EMSDK=/usr/lib/emscripten
  /usr/lib/emscripten/emcmake cmake -G Ninja -B build -S $_pkgfqn \
      -DCMAKE_FIND_ROOT_PATH:PATH="/usr/lib/emscripten/system" \
      -DCMAKE_INSTALL_PREFIX:PATH="/usr/lib/emscripten/system" \
      -DBUILD_SHARED_LIBS=OFF \
      -DFEATURE_static_runtime=ON \
      -DFEATURE_thread=ON \
      -DQT_INCLUDE_DIRS_NO_SYSTEM=ON \
      -DQT_HOST_PATH=/usr
  VERBOSE=1 cmake --build build
}

package() {
  DESTDIR="$pkgdir" cmake --install build

  install -Dm644 $_pkgfqn/LICENSES/* -t "$pkgdir"/usr/share/licenses/$pkgname

  find "${pkgdir}"/usr/lib/emscripten/system -type f -name 'lib*.so' -exec /usr/lib/emscripten/emstrip -g --strip-unneeded {} \;
  find "${pkgdir}"/usr/lib/emscripten/system -type f -name 'lib*.a' -exec /usr/lib/emscripten/emstrip -g {} \;
  [[ -d "${pkgdir}"/usr/lib/emscripten/system/share/doc ]] && rm -r "${pkgdir}"/usr/lib/emscripten/system/share/doc || true
}
